from aiogram.utils.formatting import *

from bot.database.dao.users import UserDAO
from bot.keyboards.keyboard_constructor import InlineConstructor


def inline_kb_welcome(first_name: str):
    text = as_line(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!",
        "",
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–æ–π –≤ –Ω–∏–∂–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞.",
        "",
        "/invoice - üü¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é",
        "/complaint - üî¥ –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É",
        "/manager - üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
        "",
        "–ñ–µ–ª–∞–µ–º —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
        sep="\n",
    )
    return text.as_html()


def inline_kb_invoice():
    text = as_line(
        "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –±–æ—Ç—É –ø–æ –æ—á–µ—Ä–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:",
        "üîπ –û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞",
        "üîπ –í–µ—Å –≥—Ä—É–∑–∞",
        "üîπ –ì–∞–±–∞—Ä–∏—Ç—ã –≥—Ä—É–∑–∞",
        "üîπ –¢–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏",
        "üîπ –¢–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è",
        "üîπ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",
        sep="\n",
    )
    text_and_data = [["–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å", "createinvoice"]]
    reply_markup = InlineConstructor.create_kb(text_and_data)
    return text.as_html(), reply_markup


def inline_kb_create_invoice(next_text: str, data: dict = {}):
    keys = list(data.keys())
    text = as_line(
        "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –±–æ—Ç—É –ø–æ –æ—á–µ—Ä–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:"
    )
    text += as_line("üîπ –û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞")
    if "description" in keys:
        text += as_line(data["description"])
    text += as_line("üîπ –í–µ—Å –≥—Ä—É–∑–∞")
    if "weight" in keys:
        text += as_line(data["weight"])
    text += as_line("üîπ –ì–∞–±–∞—Ä–∏—Ç—ã –≥—Ä—É–∑–∞")
    if "dimensions" in keys:
        text += as_line(data["dimensions"])
    text += as_line("üîπ –¢–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏:")
    if "pickup_address" in keys:
        text += as_line(data["pickup_address"])
    text += as_line("üîπ –¢–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è:")
    if "delivery_address" in keys:
        text += as_line(data["delivery_address"])
    text += as_line("üîπ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:")
    if "payment" in keys:
        payment_rus = {"card": "–∫–∞—Ä—Ç–æ–π", "cash": "–Ω–∞–ª–∏—á–Ω—ã–º–∏"}
        text += as_line(payment_rus[data["payment"]])
    text += as_line("", Bold(next_text), sep="\n")
    text_and_data = [
        ["–û—Ç–º–µ–Ω–∞", "deny"],
    ]
    reply_markup = InlineConstructor.create_kb(text_and_data)
    return text.as_html(), reply_markup


def inline_kb_payment_method(text):
    text = text
    text_and_data = [
        ["–ö–∞—Ä—Ç–æ–π", "payment_card"],
        ["–ù–∞–ª–∏—á–Ω—ã–º–∏", "payment_cash"],
    ]
    reply_markup = InlineConstructor.create_kb(text_and_data)
    return text, reply_markup


def inline_kb_complaint():
    text = as_line(
        "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ—Ç–µ–Ω–∑–∏—é, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –±–æ—Ç—É –ø–æ –æ—á–µ—Ä–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:",
        "üîπ –ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π",
        "üîπ E-mail –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é",
        "üîπ –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏",
        "üîπ –¢—Ä–µ–±—É–µ–º–∞—è —Å—É–º–º–∞",
        "üîπ –§–æ—Ç–æ/—Å–∫–∞–Ω—ã",
        sep="\n",
    )
    text_and_data = [["–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å", "createcomplaint"]]
    reply_markup = InlineConstructor.create_kb(text_and_data)
    return text.as_html(), reply_markup


def inline_kb_create_complaint(next_text: str, data: dict = {}):
    keys = list(data.keys())
    text = as_line(
        "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ—Ç–µ–Ω–∑–∏—é, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –±–æ—Ç—É –ø–æ –æ—á–µ—Ä–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:"
    )
    text += as_line("üîπ –ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π")
    if "invoice_id" in keys:
        text += as_line(data["invoice_id"])
    text += as_line("üîπ E-mail –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é")
    if "email" in keys:
        text += as_line(data["email"])
    text += as_line("üîπ –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏")
    if "situation_description" in keys:
        text += as_line(data["situation_description"])
    text += as_line("üîπ –¢—Ä–µ–±—É–µ–º–∞—è —Å—É–º–º–∞")
    if "required_amount" in keys:
        text += as_line(data["required_amount"])
    text += as_line("üîπ –§–æ—Ç–æ/—Å–∫–∞–Ω—ã")
    if "photo_scan" in keys:
        text += as_line(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(data['photo_scan'])} —Ñ–æ—Ç–æ/—Å–∫–∞–Ω–∞")

    text += as_line("", Bold(next_text), sep="\n")
    text_and_data = [
        ["–û—Ç–º–µ–Ω–∞", "deny"],
    ]
    reply_markup = InlineConstructor.create_kb(text_and_data)
    return text.as_html(), reply_markup


async def inline_kb_myclients(clients):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"
    text_and_data = []
    for id in clients:
        client = await UserDAO.get_by_id(model_id=id)
        text_and_data.append([f"–ö–ª–∏–µ–Ω—Ç ‚Ññ{client.id}", f"managerclient_{client.id}"])
    reply_markup = InlineConstructor.create_kb(text_and_data)
    return text, reply_markup
