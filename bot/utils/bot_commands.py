from aiogram import Bot
from aiogram.types import (BotCommand, BotCommandScopeAllPrivateChats,
                           BotCommandScopeChat, BotCommandScopeDefault)
from sqlalchemy.ext.asyncio import AsyncSession

from bot.config import Config
from bot.database.dao import UserDAO


async def set_commands(bot: Bot,) -> None:
    commands = [
        BotCommand(command="invoice", description="üü¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é"),
        BotCommand(command="complaint", description="üî¥ –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É"),
        BotCommand(command="manager", description="üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"),
    ]
    await bot.set_my_commands(commands=commands, scope=BotCommandScopeAllPrivateChats())

    managers = await UserDAO.get_all(is_manager=True)
    if managers:
        for manager in managers:
            try:
                commands.append(
                    BotCommand(command="myclients", description="üó£ –ß–∞—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏")
                )
                commands.append(
                    BotCommand(command="close", description="–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º")
                )
                await bot.set_my_commands(
                    commands=commands, scope=BotCommandScopeChat(chat_id=manager.tg_id)
                )
            except:
                print(f"Command not created for: {manager}")
    admins = await UserDAO.get_all(is_admin=True)
    if admins:
        for admin in admins:
            try:
                commands.append(
                    BotCommand(command="admin", description="ü•∑ –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                )
                await bot.set_my_commands(
                    commands=commands, scope=BotCommandScopeChat(chat_id=admin.tg_id)
                )
            except:
                print(f"Command not created for: {admin}")
